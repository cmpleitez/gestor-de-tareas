/* ========================================
           DASHBOARD DE SEGURIDAD - VERSI√ìN FINAL
           ======================================== */

// Variables globales para los gr√°ficos
let riskChart = null;
let countryChart = null;

// Funci√≥n principal de inicializaci√≥n
document.addEventListener('DOMContentLoaded', function () {
    console.log('üöÄ Dashboard de seguridad iniciando...');

    // Verificar que Chart.js est√© disponible
    if (typeof Chart === 'undefined') {
        console.error('‚ùå Chart.js no est√° disponible');
        return;
    }

    console.log('‚úÖ Chart.js disponible');

    // Limpiar cualquier gr√°fico existente
    cleanupExistingCharts();

    // Inicializar dashboard
    initializeDashboard();
});

function cleanupExistingCharts() {
    console.log('üßπ LIMPIEZA ULTRA-AGRESIVA de gr√°ficos...');

    // 1. Destruir gr√°ficos locales
    if (riskChart && typeof riskChart.destroy === 'function') {
        try {
            riskChart.destroy();
            console.log('‚úÖ Gr√°fico de riesgo destruido');
        } catch (error) {
            console.warn('‚ö†Ô∏è Error destruyendo gr√°fico de riesgo:', error);
        }
        riskChart = null;
    }

    if (countryChart && typeof countryChart.destroy === 'function') {
        try {
            countryChart.destroy();
            console.log('‚úÖ Gr√°fico de pa√≠ses destruido');
        } catch (error) {
            console.warn('‚ö†Ô∏è Error destruyendo gr√°fico de pa√≠ses:', error);
        }
        countryChart = null;
    }

    // 2. LIMPIEZA ULTRA-AGRESIVA - Destruir TODOS los gr√°ficos de Chart.js
    try {
        // M√©todo 1: Chart.instances
        if (Chart.instances && Chart.instances.length > 0) {
            console.log('üóëÔ∏è Destruyendo', Chart.instances.length, 'instancias de Chart.js');
            Chart.instances.forEach((chart, index) => {
                try {
                    if (chart && typeof chart.destroy === 'function') {
                        chart.destroy();
                        console.log(`‚úÖ Instancia ${index} destruida`);
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Error destruyendo instancia ${index}:`, error);
                }
            });
        }

        // M√©todo 2: Chart.Chart.instances (versiones m√°s nuevas)
        if (Chart.Chart && Chart.Chart.instances && Chart.Chart.instances.length > 0) {
            console.log('üóëÔ∏è Destruyendo', Chart.Chart.instances.length, 'instancias de Chart.Chart');
            Chart.Chart.instances.forEach((chart, index) => {
                try {
                    if (chart && typeof chart.destroy === 'function') {
                        chart.destroy();
                        console.log(`‚úÖ Chart.Chart instancia ${index} destruida`);
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Error destruyendo Chart.Chart instancia ${index}:`, error);
                }
            });
        }

        // M√©todo 3: Chart.registry.controllers (versiones m√°s nuevas)
        if (Chart.registry && Chart.registry.controllers && Chart.registry.controllers.size > 0) {
            console.log('üóëÔ∏è Destruyendo', Chart.registry.controllers.size, 'controladores del registro');
            Chart.registry.controllers.forEach((controller, id) => {
                try {
                    if (controller && typeof controller.destroy === 'function') {
                        controller.destroy();
                        console.log(`‚úÖ Controlador ${id} destruido`);
                    }
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Error destruyendo controlador ${id}:`, error);
                }
            });
        }

        // M√©todo 4: Limpiar registros internos
        if (typeof Chart.registry.clear === 'function') {
            try {
                Chart.registry.clear();
                console.log('‚úÖ Registro de Chart.js limpiado');
            } catch (error) {
                console.warn('‚ö†Ô∏è Error limpiando registro:', error);
            }
        }

        // M√©todo 5: Buscar y destruir TODOS los canvas del DOM
        const allCanvases = document.querySelectorAll('canvas');
        console.log('üîç Encontrados', allCanvases.length, 'canvas en el DOM');

        allCanvases.forEach((canvas, index) => {
            try {
                // Limpiar el contexto del canvas
                const ctx = canvas.getContext('2d');
                if (ctx) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    console.log(`‚úÖ Canvas ${index} limpiado`);
                }
            } catch (error) {
                console.warn(`‚ö†Ô∏è Error limpiando canvas ${index}:`, error);
            }
        });

        // M√©todo 6: Forzar limpieza de memoria
        if (window.gc) {
            try {
                window.gc();
                console.log('‚úÖ Garbage collector forzado');
            } catch (error) {
                console.log('‚ÑπÔ∏è Garbage collector no disponible');
            }
        }

    } catch (error) {
        console.error('‚ùå Error en limpieza ultra-agresiva:', error);
    }

    console.log('‚úÖ LIMPIEZA ULTRA-AGRESIVA completada');
}

function initializeDashboard() {
    console.log('üîß Inicializando dashboard...');

    // Buscar los canvas
    const riskCanvas = document.getElementById('riskDistributionChart');
    const countryCanvas = document.getElementById('threatsByCountryChart');

    console.log('üîç Canvas encontrados:', {
        risk: riskCanvas,
        country: countryCanvas
    });

    // Crear gr√°ficos solo si los canvas existen
    if (riskCanvas) {
        // Delay para asegurar que la limpieza se complete
        setTimeout(() => {
            createRiskChart(riskCanvas);
        }, 100);
    } else {
        console.warn('‚ö†Ô∏è Canvas de riesgo no encontrado');
    }

    if (countryCanvas) {
        // Delay para asegurar que la limpieza se complete
        setTimeout(() => {
            createCountryChart(countryCanvas);
        }, 200);
    } else {
        console.warn('‚ö†Ô∏è Canvas de pa√≠ses no encontrado');
    }

    // Cargar datos del servidor despu√©s de crear los gr√°ficos
    setTimeout(() => {
        loadServerData();
    }, 300);
}

function createRiskChart(canvas) {
    console.log('üé® Creando gr√°fico de riesgo...');

    // VERIFICACI√ìN EXTRA: Asegurar que el canvas est√© libre
    try {
        // Limpiar el canvas antes de crear el gr√°fico
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Verificar que no haya gr√°ficos activos en este canvas
        if (Chart.instances && Chart.instances.length > 0) {
            console.log('‚ö†Ô∏è A√∫n hay instancias activas, forzando limpieza...');
            cleanupExistingCharts();
        }

        // Crear el gr√°fico con ID √∫nico
        const chartId = 'riskChart_' + Date.now();
        console.log('üÜî Creando gr√°fico con ID:', chartId);

        riskChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Cr√≠tico', 'Alto', 'Medio'],
                datasets: [{
                    data: [0, 0, 0],
                    backgroundColor: [
                        '#e74a3b', // Cr√≠tico - Rojo
                        '#f6c23e', // Alto - Amarillo
                        '#fd7e14'  // Medio - Naranja
                    ],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '50%', // Agujero central m√°s grande para mejor proporci√≥n
                plugins: {
                    legend: {
                        display: false // Sin leyenda, solo tooltips
                    },
                    tooltip: {
                        enabled: true,
                        backgroundColor: 'rgba(0,0,0,0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        titleFont: {
                            size: 14
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function (context) {
                                return context.label + ': ' + context.parsed;
                            }
                        }
                    }
                }
            }
        });

        console.log('‚úÖ Gr√°fico de riesgo creado exitosamente');

    } catch (error) {
        console.error('‚ùå Error creando gr√°fico de riesgo:', error);
        console.error('‚ùå Stack trace:', error.stack);

        // Si falla, intentar limpiar y recrear
        try {
            console.log('üîÑ Reintentando creaci√≥n del gr√°fico...');
            cleanupExistingCharts();

            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            riskChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Error'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#dc3545']
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: false // Sin leyenda
                        }
                    }
                }
            });

            console.log('‚úÖ Gr√°fico de error creado como fallback');
        } catch (retryError) {
            console.error('‚ùå Error en reintento:', retryError);
        }
    }
}

function createCountryChart(canvas) {
    console.log('üé® Creando gr√°fico de pa√≠ses...');

    // VERIFICACI√ìN EXTRA: Asegurar que el canvas est√© libre
    try {
        // Limpiar el canvas antes de crear el gr√°fico
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Verificar que no haya gr√°ficos activos en este canvas
        if (Chart.instances && Chart.instances.length > 0) {
            console.log('‚ö†Ô∏è A√∫n hay instancias activas, forzando limpieza...');
            cleanupExistingCharts();
        }

        // Crear el gr√°fico con ID √∫nico
        const chartId = 'countryChart_' + Date.now();
        console.log('üÜî Creando gr√°fico con ID:', chartId);

        countryChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Sin datos'],
                datasets: [{
                    data: [1],
                    backgroundColor: ['#e3e6f0'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '50%', // Agujero central m√°s grande para mejor proporci√≥n
                plugins: {
                    legend: {
                        display: false // Sin leyenda, solo tooltips
                    },
                    tooltip: {
                        enabled: true,
                        backgroundColor: 'rgba(0,0,0,0.8)',
                        titleColor: '#fff',
                        bodyColor: '#fff',
                        titleFont: {
                            size: 14
                        },
                        bodyFont: {
                            size: 12
                        },
                        callbacks: {
                            label: function (context) {
                                return context.label + ': ' + context.parsed + ' amenazas';
                            }
                        }
                    }
                }
            }
        });

        console.log('‚úÖ Gr√°fico de pa√≠ses creado exitosamente');

    } catch (error) {
        console.error('‚ùå Error creando gr√°fico de pa√≠ses:', error);
        console.error('‚ùå Stack trace:', error.stack);

        // Si falla, intentar limpiar y recrear
        try {
            console.log('üîÑ Reintentando creaci√≥n del gr√°fico...');
            cleanupExistingCharts();

            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            countryChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Error'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#dc3545']
                    }]
                },
                options: {
                    plugins: {
                        legend: {
                            display: false // Sin leyenda
                        }
                    }
                }
            });

            console.log('‚úÖ Gr√°fico de error creado como fallback');
        } catch (retryError) {
            console.error('‚ùå Error en reintento:', retryError);
        }
    }
}

function loadServerData() {
    console.log('üìä Cargando datos del servidor...');

    // Obtener datos desde los atributos data-* del HTML
    const container = document.querySelector('.container-fluid[data-risk-distribution][data-threats-by-country]');

    if (!container) {
        console.warn('‚ö†Ô∏è Contenedor con datos no encontrado');
        return;
    }

    try {
        // Obtener datos de riesgo
        const riskDataAttr = container.getAttribute('data-risk-distribution');
        console.log('üîç Raw data-risk-distribution:', riskDataAttr);

        let riskData = [0, 0, 0]; // Solo 3 niveles: Cr√≠tico, Alto, Medio
        if (riskDataAttr && riskDataAttr !== 'null' && riskDataAttr !== 'undefined') {
            riskData = JSON.parse(riskDataAttr);
        }

        // Obtener datos de pa√≠ses
        const countryDataAttr = container.getAttribute('data-threats-by-country');
        console.log('üîç Raw data-threats-by-country:', countryDataAttr);

        let countryData = {};
        if (countryDataAttr && countryDataAttr !== 'null' && countryDataAttr !== 'undefined') {
            countryData = JSON.parse(countryDataAttr);
        }

        console.log('üîç Datos parseados:', {
            risk: riskData,
            country: countryData
        });

        // Actualizar gr√°ficos con los datos
        updateRiskChart(riskData);
        updateCountryChart(countryData);

        console.log('‚úÖ Datos cargados y gr√°ficos actualizados');

    } catch (error) {
        console.error('‚ùå Error cargando datos:', error);
        console.error('‚ùå Stack trace:', error.stack);
    }
}

function updateRiskChart(data) {
    if (!riskChart) {
        console.warn('‚ö†Ô∏è Gr√°fico de riesgo no disponible');
        return;
    }

    console.log('üîÑ Actualizando gr√°fico de riesgo con datos:', data);

    // Verificar que los datos sean v√°lidos
    if (Array.isArray(data) && data.length === 3) { // Solo 3 niveles: Cr√≠tico, Alto, Medio
        riskChart.data.datasets[0].data = data;
        riskChart.update();
        console.log('‚úÖ Gr√°fico de riesgo actualizado');
    } else {
        console.warn('‚ö†Ô∏è Datos de riesgo inv√°lidos - deben ser 3 niveles:', data);
    }
}

function updateCountryChart(data) {
    if (!countryChart) {
        console.warn('‚ö†Ô∏è Gr√°fico de pa√≠ses no disponible');
        return;
    }

    console.log('üîÑ Actualizando gr√°fico de pa√≠ses con datos:', data);

    // Verificar que los datos sean v√°lidos
    if (data && typeof data === 'object' && Object.keys(data).length > 0) {
        const countries = Object.keys(data);
        const counts = countries.map(country => data[country].count || 0);

        countryChart.data.labels = countries;
        countryChart.data.datasets[0].data = counts;

        // Generar colores din√°micamente
        const colors = ['#e74a3b', '#f6c23e', '#fd7e14', '#20c9a6', '#6c757d', '#17a2b8', '#6f42c1', '#28a745', '#dc3545'];
        countryChart.data.datasets[0].backgroundColor = countries.map((_, index) => colors[index % colors.length]);

        countryChart.update();
        console.log('‚úÖ Gr√°fico de pa√≠ses actualizado');
    } else {
        console.warn('‚ö†Ô∏è Datos de pa√≠ses inv√°lidos o vac√≠os:', data);
        // Mostrar estado vac√≠o
        countryChart.data.labels = ['Sin datos'];
        countryChart.data.datasets[0].data = [1];
        countryChart.data.datasets[0].backgroundColor = ['#e3e6f0'];
        countryChart.update();
    }
}

// Funci√≥n para limpiar gr√°ficos al salir de la p√°gina
window.addEventListener('beforeunload', function () {
    cleanupExistingCharts();
});

// Funci√≥n de emergencia - Si todo falla, eliminar c√°lculos complejos
window.emergencyMode = function () {
    console.log('üö® ACTIVANDO MODO DE EMERGENCIA - Eliminando c√°lculos complejos');

    try {
        // Limpiar todo
        cleanupExistingCharts();

        // Crear gr√°ficos simples sin datos
        const riskCanvas = document.getElementById('riskDistributionChart');
        const countryCanvas = document.getElementById('threatsByCountryChart');

        if (riskCanvas) {
            const ctx = riskCanvas.getContext('2d');
            ctx.clearRect(0, 0, riskCanvas.width, riskCanvas.height);

            // Gr√°fico simple sin datos
            riskChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Sin datos'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e3e6f0']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false // Sin leyenda
                        }
                    }
                }
            });
        }

        if (countryCanvas) {
            const ctx = countryCanvas.getContext('2d');
            ctx.clearRect(0, 0, countryCanvas.width, countryCanvas.height);

            // Gr√°fico simple sin datos
            countryChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Sin datos'],
                    datasets: [{
                        data: [1],
                        backgroundColor: ['#e3e6f0']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false // Sin leyenda
                        }
                    }
                }
            });
        }

        console.log('‚úÖ Modo de emergencia activado - Gr√°ficos simples creados');

    } catch (error) {
        console.error('‚ùå Error en modo de emergencia:', error);
    }
};

// Funci√≥n para debugging - mostrar estado actual
window.debugSecurityDashboard = function () {
    console.log('üîç Estado del dashboard:', {
        riskChart: riskChart,
        countryChart: countryChart,
        container: document.querySelector('.container-fluid[data-risk-distribution][data-threats-by-country]'),
        riskData: document.querySelector('.container-fluid[data-risk-distribution][data-threats-by-country]')?.getAttribute('data-risk-distribution'),
        countryData: document.querySelector('.container-fluid[data-risk-distribution][data-threats-by-country]')?.getAttribute('data-threats-by-country')
    });

    console.log('üö® Si todo falla, usa: window.emergencyMode()');
};

console.log('‚úÖ Script de dashboard de seguridad cargado');
console.log('üí° Usa window.debugSecurityDashboard() para debugging');
